// <auto-generated />
using System;
using FindJob.DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FindJob.Migrator.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190731101551_Inialized")]
    partial class Inialized
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FindJob.Entities.Concrete.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin Bey",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<int>("CompanyId");

                    b.Property<int>("EducationId");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("GenderId");

                    b.Property<int>("JobId");

                    b.Property<int>("LevelId");

                    b.Property<string>("Name");

                    b.Property<int>("SectorId");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("WorkingTimeId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EducationId");

                    b.HasIndex("GenderId");

                    b.HasIndex("JobId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SectorId");

                    b.HasIndex("WorkingTimeId");

                    b.ToTable("Advertisements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 2,
                            CompanyId = 3,
                            EducationId = 4,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenderId = 1,
                            JobId = 2,
                            LevelId = 1,
                            Name = "Okula Öğretmen ",
                            SectorId = 1,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkingTimeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CityId = 3,
                            CompanyId = 1,
                            EducationId = 4,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenderId = 1,
                            JobId = 1,
                            LevelId = 1,
                            Name = "Mühendis ",
                            SectorId = 2,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkingTimeId = 1
                        });
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.AdvertisementApplicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertisementId");

                    b.Property<int>("ApplicantId");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId");

                    b.HasIndex("ApplicantId");

                    b.ToTable("AdvertisementApplicants");
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.Applicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Surname");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Applicants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İşveren",
                            Surname = "İşverenoğulları",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Konya"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kayseri"
                        });
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 3,
                            Name = "Arven İnşaat"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            Name = "İngiliz Kültür Koleji"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 2,
                            Name = "Doğa Koleji"
                        });
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "İlkokul"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ortaokul"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lise"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Üniversite"
                        });
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CompanyId");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Email = "employer@findingjob.com",
                            Name = "Başvuran",
                            PhoneNumber = "901234567896",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Farketmez"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kadın"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Erkek"
                        });
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("SectorId");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Matematik Öğretmeni",
                            SectorId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "İnşaat Mühendisi",
                            SectorId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Türkçe Öğretmeni",
                            SectorId = 1
                        });
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Eleman"
                        });
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Sectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Eğitim"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mühendislik"
                        });
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EMail");

                    b.Property<string>("Password");

                    b.Property<byte>("UserType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EMail = "admin@findingjob.com",
                            Password = "1",
                            UserType = (byte)1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            EMail = "employer@findingjob.com",
                            Password = "2",
                            UserType = (byte)3,
                            Username = "employer"
                        },
                        new
                        {
                            Id = 3,
                            EMail = "applicant@findingjob.com",
                            Password = "3",
                            UserType = (byte)2,
                            Username = "applicant"
                        });
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.WorkingTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("WorkingTimes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tam Zamanlı"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Part Time"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stajyer"
                        });
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.Admin", b =>
                {
                    b.HasOne("FindJob.Entities.Concrete.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("FindJob.Entities.Concrete.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.Advertisement", b =>
                {
                    b.HasOne("FindJob.Entities.Concrete.City", "City")
                        .WithMany("Advertisements")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FindJob.Entities.Concrete.Company", "Company")
                        .WithMany("Advertisements")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FindJob.Entities.Concrete.Education", "Education")
                        .WithMany("Advertisements")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FindJob.Entities.Concrete.Gender", "Gender")
                        .WithMany("Advertisements")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FindJob.Entities.Concrete.Job", "Job")
                        .WithMany("Advertisements")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FindJob.Entities.Concrete.Level", "Level")
                        .WithMany("Advertisements")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FindJob.Entities.Concrete.Sector", "Sector")
                        .WithMany("Advertisements")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FindJob.Entities.Concrete.WorkingTime", "WorkingTime")
                        .WithMany("Advertisements")
                        .HasForeignKey("WorkingTimeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.AdvertisementApplicant", b =>
                {
                    b.HasOne("FindJob.Entities.Concrete.Advertisement", "Advertisement")
                        .WithMany("AdvertisementApplicants")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FindJob.Entities.Concrete.Applicant", "Applicant")
                        .WithMany("AdvertisementApplicants")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.Applicant", b =>
                {
                    b.HasOne("FindJob.Entities.Concrete.User", "User")
                        .WithOne("Applicant")
                        .HasForeignKey("FindJob.Entities.Concrete.Applicant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.Company", b =>
                {
                    b.HasOne("FindJob.Entities.Concrete.City", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.Employer", b =>
                {
                    b.HasOne("FindJob.Entities.Concrete.Company", "Company")
                        .WithMany("Employers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FindJob.Entities.Concrete.User", "User")
                        .WithOne("Employer")
                        .HasForeignKey("FindJob.Entities.Concrete.Employer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FindJob.Entities.Concrete.Job", b =>
                {
                    b.HasOne("FindJob.Entities.Concrete.Sector", "Sector")
                        .WithMany("Jobs")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
